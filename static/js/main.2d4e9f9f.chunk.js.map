{"version":3,"sources":["components/Pokecard.js","components/Pokedex.js","components/GamePokemon.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","data","this","props","className","name","alt","src","id","slice","type","base_experience","Component","Pokedex","title","isWinner","exp","pokemon","map","GamePokemon","mano1","mano2","length","randIdx","Math","floor","random","randPokemon","splice","push","exp1","reduce","exp2","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8UAKqBA,G,6KAEjB,IAHkBC,EAGZC,EAAOC,KAAKC,MAClB,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,kBAAkBH,EAAKI,MACtC,yBACED,UAAU,iBACVE,IAAKL,EAAKI,KACVE,IAAG,UAXI,8DAWJ,QAVSP,EAUsBC,EAAKO,GAVfR,GAAU,IAAM,YAAKA,GAASS,OAAO,GAAKT,GAU/D,UAEL,yBAAKI,UAAU,iBAAf,SAAsCH,EAAKS,MAC3C,yBAAKN,UAAU,iBAAf,QAAqCH,EAAKU,sB,GAZZC,cCDjBC,G,6KAEjB,IAAIC,EAMJ,OAJEA,EADEZ,KAAKC,MAAMY,SACL,wBAAIX,UAAU,kBAAd,kBAEA,wBAAIA,UAAU,iBAAd,kBAGR,yBAAKA,UAAU,WACZU,EACD,kDAAwBZ,KAAKC,MAAMa,KACnC,yBAAKZ,UAAU,iBACZF,KAAKC,MAAMc,QAAQC,KAAI,SAACD,GAAD,OACtB,kBAAC,EAAD,CACET,GAAIS,EAAQT,GACZH,KAAMY,EAAQZ,KACdK,KAAMO,EAAQP,KACdC,gBAAiBM,EAAQN,2B,GAlBFC,cCD/BO,E,uKAgBF,IAFA,IAAIC,EAAQ,GACRC,EAAK,YAAOnB,KAAKC,MAAMc,SACpBG,EAAME,OAASD,EAAMC,QAAQ,CAClC,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,QAC3CK,EAAcN,EAAMO,OAAOL,EAAS,GAAG,GAC3CH,EAAMS,KAAKF,GAEb,IAAIG,EAAOV,EAAMW,QAAO,SAACf,EAAKC,GAAN,OAAkBD,EAAMC,EAAQN,kBAAiB,GACrEqB,EAAOX,EAAMU,QAAO,SAACf,EAAKC,GAAN,OAAkBD,EAAMC,EAAQN,kBAAiB,GACzE,OACE,6BACE,kBAAC,EAAD,CAASM,QAASG,EAAOJ,IAAKc,EAAMf,SAAUe,EAAOE,IACrD,kBAAC,EAAD,CAASf,QAASI,EAAOL,IAAKgB,EAAMjB,SAAUiB,EAAOF,S,GA1BnClB,aAApBO,EACGc,aAAe,CACpBhB,QAAS,CACP,CAAET,GAAI,EAAGH,KAAM,aAAcK,KAAM,OAAQC,gBAAiB,IAC5D,CAAEH,GAAI,EAAGH,KAAM,WAAYK,KAAM,QAASC,gBAAiB,IAC3D,CAAEH,GAAI,GAAIH,KAAM,UAAWK,KAAM,MAAOC,gBAAiB,IACzD,CAAEH,GAAI,GAAIH,KAAM,aAAcK,KAAM,SAAUC,gBAAiB,KAC/D,CAAEH,GAAI,GAAIH,KAAM,UAAWK,KAAM,WAAYC,gBAAiB,KAC9D,CAAEH,GAAI,GAAIH,KAAM,aAAcK,KAAM,SAAUC,gBAAiB,IAC/D,CAAEH,GAAI,GAAIH,KAAM,SAAUK,KAAM,SAAUC,gBAAiB,KAC3D,CAAEH,GAAI,IAAKH,KAAM,QAASK,KAAM,SAAUC,gBAAiB,MAsBlDQ,QCtBAe,MARf,WACE,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,QCIc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2d4e9f9f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../style/Pokecard.css';\r\n\r\nconst POKE_API = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/';\r\nlet formatearIdURL = (number) => (number <= 999 ? `00${number}`.slice(-3) : number);\r\nexport default class Pokecard extends Component {\r\n  render() {\r\n    const data = this.props;\r\n    return (\r\n      <div className=\"Pokecard\">\r\n        <div className=\"Pokecard-title\">{data.name}</div>\r\n        <img\r\n          className=\"Pokecard-image\"\r\n          alt={data.name}\r\n          src={`${POKE_API}${formatearIdURL(data.id)}.png`}\r\n        />\r\n        <div className=\"Pokecard-data\">Tipo: {data.type}</div>\r\n        <div className=\"Pokecard-data\">Exp: {data.base_experience}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Pokecard from './Pokecard';\r\nimport '../style/Pokedex.css';\r\n\r\nexport default class Pokedex extends Component {\r\n  render() {\r\n    let title;\r\n    if (this.props.isWinner) {\r\n      title = <h1 className=\"Pokedex-winner\">Mano Ganadora!</h1>;\r\n    } else {\r\n      title = <h1 className=\"Pokedex-loser\">Mano Perdedora</h1>;\r\n    }\r\n    return (\r\n      <div className=\"Pokedex\">\r\n        {title}\r\n        <h4>Experiencia total: {this.props.exp}</h4>\r\n        <div className=\"Pokedex-cards\">\r\n          {this.props.pokemon.map((pokemon) => (\r\n            <Pokecard\r\n              id={pokemon.id}\r\n              name={pokemon.name}\r\n              type={pokemon.type}\r\n              base_experience={pokemon.base_experience}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Pokedex from './Pokedex';\r\n\r\nclass GamePokemon extends Component {\r\n  static defaultProps = {\r\n    pokemon: [\r\n      { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\r\n      { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\r\n      { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\r\n      { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\r\n      { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\r\n      { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\r\n      { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\r\n      { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 },\r\n    ],\r\n  };\r\n  render() {\r\n    let mano1 = [];\r\n    let mano2 = [...this.props.pokemon];\r\n    while (mano1.length < mano2.length) {\r\n      let randIdx = Math.floor(Math.random() * mano2.length);\r\n      let randPokemon = mano2.splice(randIdx, 1)[0];\r\n      mano1.push(randPokemon);\r\n    }\r\n    let exp1 = mano1.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\r\n    let exp2 = mano2.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\r\n    return (\r\n      <div>\r\n        <Pokedex pokemon={mano1} exp={exp1} isWinner={exp1 > exp2} />\r\n        <Pokedex pokemon={mano2} exp={exp2} isWinner={exp2 > exp1} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GamePokemon;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport './style/index.css';\r\nimport GamePokemon from './components/GamePokemon';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GamePokemon />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}